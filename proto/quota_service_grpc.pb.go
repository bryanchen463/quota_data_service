// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuotaServiceClient is the client API for QuotaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuotaServiceClient interface {
	// 推送行情数据
	IngestTick(ctx context.Context, in *IngestTickRequest, opts ...grpc.CallOption) (*IngestTickResponse, error)
	// 批量推送行情数据
	IngestTicks(ctx context.Context, in *IngestTicksRequest, opts ...grpc.CallOption) (*IngestTicksResponse, error)
	// 获取行情数据
	GetTicks(ctx context.Context, in *GetTicksRequest, opts ...grpc.CallOption) (*GetTicksResponse, error)
	// 获取最新行情
	GetLatestTick(ctx context.Context, in *GetLatestTickRequest, opts ...grpc.CallOption) (*GetLatestTickResponse, error)
	// 健康检查
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// 获取活跃交易对
	GetActiveSymbols(ctx context.Context, in *GetActiveSymbolsRequest, opts ...grpc.CallOption) (*GetActiveSymbolsResponse, error)
}

type quotaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuotaServiceClient(cc grpc.ClientConnInterface) QuotaServiceClient {
	return &quotaServiceClient{cc}
}

func (c *quotaServiceClient) IngestTick(ctx context.Context, in *IngestTickRequest, opts ...grpc.CallOption) (*IngestTickResponse, error) {
	out := new(IngestTickResponse)
	err := c.cc.Invoke(ctx, "/quota_service.QuotaService/IngestTick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaServiceClient) IngestTicks(ctx context.Context, in *IngestTicksRequest, opts ...grpc.CallOption) (*IngestTicksResponse, error) {
	out := new(IngestTicksResponse)
	err := c.cc.Invoke(ctx, "/quota_service.QuotaService/IngestTicks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaServiceClient) GetTicks(ctx context.Context, in *GetTicksRequest, opts ...grpc.CallOption) (*GetTicksResponse, error) {
	out := new(GetTicksResponse)
	err := c.cc.Invoke(ctx, "/quota_service.QuotaService/GetTicks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaServiceClient) GetLatestTick(ctx context.Context, in *GetLatestTickRequest, opts ...grpc.CallOption) (*GetLatestTickResponse, error) {
	out := new(GetLatestTickResponse)
	err := c.cc.Invoke(ctx, "/quota_service.QuotaService/GetLatestTick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/quota_service.QuotaService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaServiceClient) GetActiveSymbols(ctx context.Context, in *GetActiveSymbolsRequest, opts ...grpc.CallOption) (*GetActiveSymbolsResponse, error) {
	out := new(GetActiveSymbolsResponse)
	err := c.cc.Invoke(ctx, "/quota_service.QuotaService/GetActiveSymbols", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuotaServiceServer is the server API for QuotaService service.
// All implementations must embed UnimplementedQuotaServiceServer
// for forward compatibility
type QuotaServiceServer interface {
	// 推送行情数据
	IngestTick(context.Context, *IngestTickRequest) (*IngestTickResponse, error)
	// 批量推送行情数据
	IngestTicks(context.Context, *IngestTicksRequest) (*IngestTicksResponse, error)
	// 获取行情数据
	GetTicks(context.Context, *GetTicksRequest) (*GetTicksResponse, error)
	// 获取最新行情
	GetLatestTick(context.Context, *GetLatestTickRequest) (*GetLatestTickResponse, error)
	// 健康检查
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// 获取活跃交易对
	GetActiveSymbols(context.Context, *GetActiveSymbolsRequest) (*GetActiveSymbolsResponse, error)
	mustEmbedUnimplementedQuotaServiceServer()
}

// UnimplementedQuotaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuotaServiceServer struct {
}

func (UnimplementedQuotaServiceServer) IngestTick(context.Context, *IngestTickRequest) (*IngestTickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestTick not implemented")
}
func (UnimplementedQuotaServiceServer) IngestTicks(context.Context, *IngestTicksRequest) (*IngestTicksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestTicks not implemented")
}
func (UnimplementedQuotaServiceServer) GetTicks(context.Context, *GetTicksRequest) (*GetTicksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicks not implemented")
}
func (UnimplementedQuotaServiceServer) GetLatestTick(context.Context, *GetLatestTickRequest) (*GetLatestTickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestTick not implemented")
}
func (UnimplementedQuotaServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedQuotaServiceServer) GetActiveSymbols(context.Context, *GetActiveSymbolsRequest) (*GetActiveSymbolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveSymbols not implemented")
}
func (UnimplementedQuotaServiceServer) mustEmbedUnimplementedQuotaServiceServer() {}

// UnsafeQuotaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuotaServiceServer will
// result in compilation errors.
type UnsafeQuotaServiceServer interface {
	mustEmbedUnimplementedQuotaServiceServer()
}

func RegisterQuotaServiceServer(s grpc.ServiceRegistrar, srv QuotaServiceServer) {
	s.RegisterService(&QuotaService_ServiceDesc, srv)
}

func _QuotaService_IngestTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestTickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).IngestTick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quota_service.QuotaService/IngestTick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).IngestTick(ctx, req.(*IngestTickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaService_IngestTicks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestTicksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).IngestTicks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quota_service.QuotaService/IngestTicks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).IngestTicks(ctx, req.(*IngestTicksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaService_GetTicks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).GetTicks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quota_service.QuotaService/GetTicks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).GetTicks(ctx, req.(*GetTicksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaService_GetLatestTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestTickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).GetLatestTick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quota_service.QuotaService/GetLatestTick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).GetLatestTick(ctx, req.(*GetLatestTickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quota_service.QuotaService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaService_GetActiveSymbols_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveSymbolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).GetActiveSymbols(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quota_service.QuotaService/GetActiveSymbols",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).GetActiveSymbols(ctx, req.(*GetActiveSymbolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuotaService_ServiceDesc is the grpc.ServiceDesc for QuotaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuotaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quota_service.QuotaService",
	HandlerType: (*QuotaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IngestTick",
			Handler:    _QuotaService_IngestTick_Handler,
		},
		{
			MethodName: "IngestTicks",
			Handler:    _QuotaService_IngestTicks_Handler,
		},
		{
			MethodName: "GetTicks",
			Handler:    _QuotaService_GetTicks_Handler,
		},
		{
			MethodName: "GetLatestTick",
			Handler:    _QuotaService_GetLatestTick_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _QuotaService_HealthCheck_Handler,
		},
		{
			MethodName: "GetActiveSymbols",
			Handler:    _QuotaService_GetActiveSymbols_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/quota_service.proto",
}
