// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v5.29.0--rc3
// source: proto/quota_service.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Interval int32

const (
	Interval_INTERVAL_1MS   Interval = 0
	Interval_INTERVAL_5MS   Interval = 1
	Interval_INTERVAL_10MS  Interval = 2
	Interval_INTERVAL_30MS  Interval = 3
	Interval_INTERVAL_100MS Interval = 4
	Interval_INTERVAL_1S    Interval = 5
	Interval_INTERVAL_5S    Interval = 6
	Interval_INTERVAL_10S   Interval = 7
	Interval_INTERVAL_30S   Interval = 8
	Interval_INTERVAL_1M    Interval = 9
	Interval_INTERVAL_5M    Interval = 10
	Interval_INTERVAL_15M   Interval = 11
	Interval_INTERVAL_30M   Interval = 12
	Interval_INTERVAL_1H    Interval = 13
	Interval_INTERVAL_4H    Interval = 14
	Interval_INTERVAL_1D    Interval = 15
)

// Enum value maps for Interval.
var (
	Interval_name = map[int32]string{
		0:  "INTERVAL_1MS",
		1:  "INTERVAL_5MS",
		2:  "INTERVAL_10MS",
		3:  "INTERVAL_30MS",
		4:  "INTERVAL_100MS",
		5:  "INTERVAL_1S",
		6:  "INTERVAL_5S",
		7:  "INTERVAL_10S",
		8:  "INTERVAL_30S",
		9:  "INTERVAL_1M",
		10: "INTERVAL_5M",
		11: "INTERVAL_15M",
		12: "INTERVAL_30M",
		13: "INTERVAL_1H",
		14: "INTERVAL_4H",
		15: "INTERVAL_1D",
	}
	Interval_value = map[string]int32{
		"INTERVAL_1MS":   0,
		"INTERVAL_5MS":   1,
		"INTERVAL_10MS":  2,
		"INTERVAL_30MS":  3,
		"INTERVAL_100MS": 4,
		"INTERVAL_1S":    5,
		"INTERVAL_5S":    6,
		"INTERVAL_10S":   7,
		"INTERVAL_30S":   8,
		"INTERVAL_1M":    9,
		"INTERVAL_5M":    10,
		"INTERVAL_15M":   11,
		"INTERVAL_30M":   12,
		"INTERVAL_1H":    13,
		"INTERVAL_4H":    14,
		"INTERVAL_1D":    15,
	}
)

func (x Interval) Enum() *Interval {
	p := new(Interval)
	*p = x
	return p
}

func (x Interval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interval) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_quota_service_proto_enumTypes[0].Descriptor()
}

func (Interval) Type() protoreflect.EnumType {
	return &file_proto_quota_service_proto_enumTypes[0]
}

func (x Interval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interval.Descriptor instead.
func (Interval) EnumDescriptor() ([]byte, []int) {
	return file_proto_quota_service_proto_rawDescGZIP(), []int{0}
}

// 单个行情数据
type Tick struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 接收时间（Unix时间戳，秒）
	ReceiveTime float64 `protobuf:"fixed64,1,opt,name=receive_time,json=receiveTime,proto3" json:"receive_time,omitempty"`
	// 交易对符号
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// 交易所
	Exchange string `protobuf:"bytes,3,opt,name=exchange,proto3" json:"exchange,omitempty"`
	// 市场类型：SP|UM
	MarketType string `protobuf:"bytes,4,opt,name=market_type,json=marketType,proto3" json:"market_type,omitempty"`
	// 最佳买价
	BestBidPx float64 `protobuf:"fixed64,5,opt,name=best_bid_px,json=bestBidPx,proto3" json:"best_bid_px,omitempty"`
	// 最佳买量
	BestBidSz float64 `protobuf:"fixed64,6,opt,name=best_bid_sz,json=bestBidSz,proto3" json:"best_bid_sz,omitempty"`
	// 最佳卖价
	BestAskPx float64 `protobuf:"fixed64,7,opt,name=best_ask_px,json=bestAskPx,proto3" json:"best_ask_px,omitempty"`
	// 最佳卖量
	BestAskSz float64 `protobuf:"fixed64,8,opt,name=best_ask_sz,json=bestAskSz,proto3" json:"best_ask_sz,omitempty"`
	// 买单价格数组
	BidsPx []float64 `protobuf:"fixed64,9,rep,packed,name=bids_px,json=bidsPx,proto3" json:"bids_px,omitempty"`
	// 买单数量数组
	BidsSz []float64 `protobuf:"fixed64,10,rep,packed,name=bids_sz,json=bidsSz,proto3" json:"bids_sz,omitempty"`
	// 卖单价格数组
	AsksPx []float64 `protobuf:"fixed64,11,rep,packed,name=asks_px,json=asksPx,proto3" json:"asks_px,omitempty"`
	// 卖单数量数组
	AsksSz        []float64 `protobuf:"fixed64,12,rep,packed,name=asks_sz,json=asksSz,proto3" json:"asks_sz,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tick) Reset() {
	*x = Tick{}
	mi := &file_proto_quota_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tick) ProtoMessage() {}

func (x *Tick) ProtoReflect() protoreflect.Message {
	mi := &file_proto_quota_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tick.ProtoReflect.Descriptor instead.
func (*Tick) Descriptor() ([]byte, []int) {
	return file_proto_quota_service_proto_rawDescGZIP(), []int{0}
}

func (x *Tick) GetReceiveTime() float64 {
	if x != nil {
		return x.ReceiveTime
	}
	return 0
}

func (x *Tick) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Tick) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Tick) GetMarketType() string {
	if x != nil {
		return x.MarketType
	}
	return ""
}

func (x *Tick) GetBestBidPx() float64 {
	if x != nil {
		return x.BestBidPx
	}
	return 0
}

func (x *Tick) GetBestBidSz() float64 {
	if x != nil {
		return x.BestBidSz
	}
	return 0
}

func (x *Tick) GetBestAskPx() float64 {
	if x != nil {
		return x.BestAskPx
	}
	return 0
}

func (x *Tick) GetBestAskSz() float64 {
	if x != nil {
		return x.BestAskSz
	}
	return 0
}

func (x *Tick) GetBidsPx() []float64 {
	if x != nil {
		return x.BidsPx
	}
	return nil
}

func (x *Tick) GetBidsSz() []float64 {
	if x != nil {
		return x.BidsSz
	}
	return nil
}

func (x *Tick) GetAsksPx() []float64 {
	if x != nil {
		return x.AsksPx
	}
	return nil
}

func (x *Tick) GetAsksSz() []float64 {
	if x != nil {
		return x.AsksSz
	}
	return nil
}

// 推送单个行情请求
type IngestTickRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tick          *Tick                  `protobuf:"bytes,1,opt,name=tick,proto3" json:"tick,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngestTickRequest) Reset() {
	*x = IngestTickRequest{}
	mi := &file_proto_quota_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestTickRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestTickRequest) ProtoMessage() {}

func (x *IngestTickRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_quota_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestTickRequest.ProtoReflect.Descriptor instead.
func (*IngestTickRequest) Descriptor() ([]byte, []int) {
	return file_proto_quota_service_proto_rawDescGZIP(), []int{1}
}

func (x *IngestTickRequest) GetTick() *Tick {
	if x != nil {
		return x.Tick
	}
	return nil
}

// 推送单个行情响应
type IngestTickResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngestTickResponse) Reset() {
	*x = IngestTickResponse{}
	mi := &file_proto_quota_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestTickResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestTickResponse) ProtoMessage() {}

func (x *IngestTickResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_quota_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestTickResponse.ProtoReflect.Descriptor instead.
func (*IngestTickResponse) Descriptor() ([]byte, []int) {
	return file_proto_quota_service_proto_rawDescGZIP(), []int{2}
}

func (x *IngestTickResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *IngestTickResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 批量推送行情请求
type IngestTicksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ticks         []*Tick                `protobuf:"bytes,1,rep,name=ticks,proto3" json:"ticks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngestTicksRequest) Reset() {
	*x = IngestTicksRequest{}
	mi := &file_proto_quota_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestTicksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestTicksRequest) ProtoMessage() {}

func (x *IngestTicksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_quota_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestTicksRequest.ProtoReflect.Descriptor instead.
func (*IngestTicksRequest) Descriptor() ([]byte, []int) {
	return file_proto_quota_service_proto_rawDescGZIP(), []int{3}
}

func (x *IngestTicksRequest) GetTicks() []*Tick {
	if x != nil {
		return x.Ticks
	}
	return nil
}

// 批量推送行情响应
type IngestTicksResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Success        bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message        string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ProcessedCount int32                  `protobuf:"varint,3,opt,name=processed_count,json=processedCount,proto3" json:"processed_count,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *IngestTicksResponse) Reset() {
	*x = IngestTicksResponse{}
	mi := &file_proto_quota_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestTicksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestTicksResponse) ProtoMessage() {}

func (x *IngestTicksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_quota_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestTicksResponse.ProtoReflect.Descriptor instead.
func (*IngestTicksResponse) Descriptor() ([]byte, []int) {
	return file_proto_quota_service_proto_rawDescGZIP(), []int{4}
}

func (x *IngestTicksResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *IngestTicksResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *IngestTicksResponse) GetProcessedCount() int32 {
	if x != nil {
		return x.ProcessedCount
	}
	return 0
}

// 健康检查请求
type HealthCheckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	mi := &file_proto_quota_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_quota_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_proto_quota_service_proto_rawDescGZIP(), []int{5}
}

// 健康检查响应
type HealthCheckResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Healthy       bool                   `protobuf:"varint,1,opt,name=healthy,proto3" json:"healthy,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Timestamp     int64                  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	mi := &file_proto_quota_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_quota_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_proto_quota_service_proto_rawDescGZIP(), []int{6}
}

func (x *HealthCheckResponse) GetHealthy() bool {
	if x != nil {
		return x.Healthy
	}
	return false
}

func (x *HealthCheckResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *HealthCheckResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// 获取行情数据请求
type GetTicksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 交易对符号（可选，支持通配符）
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// 交易所（可选）nets
	Exchange string `protobuf:"bytes,2,opt,name=exchange,proto3" json:"exchange,omitempty"`
	// 市场类型（可选）：SP|UM
	MarketType string `protobuf:"bytes,3,opt,name=market_type,json=marketType,proto3" json:"market_type,omitempty"`
	// 开始时间（Unix时间戳，秒）
	StartTime int64 `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// 结束时间（Unix时间戳，秒）
	EndTime int64 `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// 限制返回数量（默认100，最大1000）
	Limit int32 `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	// 偏移量（用于分页）
	Offset int32 `protobuf:"varint,7,opt,name=offset,proto3" json:"offset,omitempty"`
	// 时间分区（返回多长时间切片的数据）
	Interval      Interval `protobuf:"varint,8,opt,name=interval,proto3,enum=quota_service.Interval" json:"interval,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTicksRequest) Reset() {
	*x = GetTicksRequest{}
	mi := &file_proto_quota_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTicksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTicksRequest) ProtoMessage() {}

func (x *GetTicksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_quota_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTicksRequest.ProtoReflect.Descriptor instead.
func (*GetTicksRequest) Descriptor() ([]byte, []int) {
	return file_proto_quota_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetTicksRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetTicksRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *GetTicksRequest) GetMarketType() string {
	if x != nil {
		return x.MarketType
	}
	return ""
}

func (x *GetTicksRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetTicksRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GetTicksRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetTicksRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetTicksRequest) GetInterval() Interval {
	if x != nil {
		return x.Interval
	}
	return Interval_INTERVAL_1MS
}

// 获取行情数据响应
type GetTicksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Ticks         []*Tick                `protobuf:"bytes,3,rep,name=ticks,proto3" json:"ticks,omitempty"`
	TotalCount    int32                  `protobuf:"varint,4,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTicksResponse) Reset() {
	*x = GetTicksResponse{}
	mi := &file_proto_quota_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTicksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTicksResponse) ProtoMessage() {}

func (x *GetTicksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_quota_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTicksResponse.ProtoReflect.Descriptor instead.
func (*GetTicksResponse) Descriptor() ([]byte, []int) {
	return file_proto_quota_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetTicksResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetTicksResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetTicksResponse) GetTicks() []*Tick {
	if x != nil {
		return x.Ticks
	}
	return nil
}

func (x *GetTicksResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

// 获取最新行情请求
type GetLatestTickRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 交易对符号（必填）
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// 交易所（可选）
	Exchange string `protobuf:"bytes,2,opt,name=exchange,proto3" json:"exchange,omitempty"`
	// 市场类型（可选）：SP|UM
	MarketType    string `protobuf:"bytes,3,opt,name=market_type,json=marketType,proto3" json:"market_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLatestTickRequest) Reset() {
	*x = GetLatestTickRequest{}
	mi := &file_proto_quota_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLatestTickRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestTickRequest) ProtoMessage() {}

func (x *GetLatestTickRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_quota_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestTickRequest.ProtoReflect.Descriptor instead.
func (*GetLatestTickRequest) Descriptor() ([]byte, []int) {
	return file_proto_quota_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetLatestTickRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetLatestTickRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *GetLatestTickRequest) GetMarketType() string {
	if x != nil {
		return x.MarketType
	}
	return ""
}

// 获取最新行情响应
type GetLatestTickResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Tick          *Tick                  `protobuf:"bytes,3,opt,name=tick,proto3" json:"tick,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLatestTickResponse) Reset() {
	*x = GetLatestTickResponse{}
	mi := &file_proto_quota_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLatestTickResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestTickResponse) ProtoMessage() {}

func (x *GetLatestTickResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_quota_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestTickResponse.ProtoReflect.Descriptor instead.
func (*GetLatestTickResponse) Descriptor() ([]byte, []int) {
	return file_proto_quota_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetLatestTickResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetLatestTickResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetLatestTickResponse) GetTick() *Tick {
	if x != nil {
		return x.Tick
	}
	return nil
}

var File_proto_quota_service_proto protoreflect.FileDescriptor

const file_proto_quota_service_proto_rawDesc = "" +
	"\n" +
	"\x19proto/quota_service.proto\x12\rquota_service\"\xe2\x02\n" +
	"\x04Tick\x12!\n" +
	"\freceive_time\x18\x01 \x01(\x01R\vreceiveTime\x12\x16\n" +
	"\x06symbol\x18\x02 \x01(\tR\x06symbol\x12\x1a\n" +
	"\bexchange\x18\x03 \x01(\tR\bexchange\x12\x1f\n" +
	"\vmarket_type\x18\x04 \x01(\tR\n" +
	"marketType\x12\x1e\n" +
	"\vbest_bid_px\x18\x05 \x01(\x01R\tbestBidPx\x12\x1e\n" +
	"\vbest_bid_sz\x18\x06 \x01(\x01R\tbestBidSz\x12\x1e\n" +
	"\vbest_ask_px\x18\a \x01(\x01R\tbestAskPx\x12\x1e\n" +
	"\vbest_ask_sz\x18\b \x01(\x01R\tbestAskSz\x12\x17\n" +
	"\abids_px\x18\t \x03(\x01R\x06bidsPx\x12\x17\n" +
	"\abids_sz\x18\n" +
	" \x03(\x01R\x06bidsSz\x12\x17\n" +
	"\aasks_px\x18\v \x03(\x01R\x06asksPx\x12\x17\n" +
	"\aasks_sz\x18\f \x03(\x01R\x06asksSz\"<\n" +
	"\x11IngestTickRequest\x12'\n" +
	"\x04tick\x18\x01 \x01(\v2\x13.quota_service.TickR\x04tick\"H\n" +
	"\x12IngestTickResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"?\n" +
	"\x12IngestTicksRequest\x12)\n" +
	"\x05ticks\x18\x01 \x03(\v2\x13.quota_service.TickR\x05ticks\"r\n" +
	"\x13IngestTicksResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12'\n" +
	"\x0fprocessed_count\x18\x03 \x01(\x05R\x0eprocessedCount\"\x14\n" +
	"\x12HealthCheckRequest\"g\n" +
	"\x13HealthCheckResponse\x12\x18\n" +
	"\ahealthy\x18\x01 \x01(\bR\ahealthy\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\"\x83\x02\n" +
	"\x0fGetTicksRequest\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\x12\x1a\n" +
	"\bexchange\x18\x02 \x01(\tR\bexchange\x12\x1f\n" +
	"\vmarket_type\x18\x03 \x01(\tR\n" +
	"marketType\x12\x1d\n" +
	"\n" +
	"start_time\x18\x04 \x01(\x03R\tstartTime\x12\x19\n" +
	"\bend_time\x18\x05 \x01(\x03R\aendTime\x12\x14\n" +
	"\x05limit\x18\x06 \x01(\x05R\x05limit\x12\x16\n" +
	"\x06offset\x18\a \x01(\x05R\x06offset\x123\n" +
	"\binterval\x18\b \x01(\x0e2\x17.quota_service.IntervalR\binterval\"\x92\x01\n" +
	"\x10GetTicksResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12)\n" +
	"\x05ticks\x18\x03 \x03(\v2\x13.quota_service.TickR\x05ticks\x12\x1f\n" +
	"\vtotal_count\x18\x04 \x01(\x05R\n" +
	"totalCount\"k\n" +
	"\x14GetLatestTickRequest\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\x12\x1a\n" +
	"\bexchange\x18\x02 \x01(\tR\bexchange\x12\x1f\n" +
	"\vmarket_type\x18\x03 \x01(\tR\n" +
	"marketType\"t\n" +
	"\x15GetLatestTickResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12'\n" +
	"\x04tick\x18\x03 \x01(\v2\x13.quota_service.TickR\x04tick*\xa7\x02\n" +
	"\bInterval\x12\x10\n" +
	"\fINTERVAL_1MS\x10\x00\x12\x10\n" +
	"\fINTERVAL_5MS\x10\x01\x12\x11\n" +
	"\rINTERVAL_10MS\x10\x02\x12\x11\n" +
	"\rINTERVAL_30MS\x10\x03\x12\x12\n" +
	"\x0eINTERVAL_100MS\x10\x04\x12\x0f\n" +
	"\vINTERVAL_1S\x10\x05\x12\x0f\n" +
	"\vINTERVAL_5S\x10\x06\x12\x10\n" +
	"\fINTERVAL_10S\x10\a\x12\x10\n" +
	"\fINTERVAL_30S\x10\b\x12\x0f\n" +
	"\vINTERVAL_1M\x10\t\x12\x0f\n" +
	"\vINTERVAL_5M\x10\n" +
	"\x12\x10\n" +
	"\fINTERVAL_15M\x10\v\x12\x10\n" +
	"\fINTERVAL_30M\x10\f\x12\x0f\n" +
	"\vINTERVAL_1H\x10\r\x12\x0f\n" +
	"\vINTERVAL_4H\x10\x0e\x12\x0f\n" +
	"\vINTERVAL_1D\x10\x0f2\xb6\x03\n" +
	"\fQuotaService\x12Q\n" +
	"\n" +
	"IngestTick\x12 .quota_service.IngestTickRequest\x1a!.quota_service.IngestTickResponse\x12T\n" +
	"\vIngestTicks\x12!.quota_service.IngestTicksRequest\x1a\".quota_service.IngestTicksResponse\x12K\n" +
	"\bGetTicks\x12\x1e.quota_service.GetTicksRequest\x1a\x1f.quota_service.GetTicksResponse\x12Z\n" +
	"\rGetLatestTick\x12#.quota_service.GetLatestTickRequest\x1a$.quota_service.GetLatestTickResponse\x12T\n" +
	"\vHealthCheck\x12!.quota_service.HealthCheckRequest\x1a\".quota_service.HealthCheckResponseB2Z0github.com/bryanchen463/quota_data_service/protob\x06proto3"

var (
	file_proto_quota_service_proto_rawDescOnce sync.Once
	file_proto_quota_service_proto_rawDescData []byte
)

func file_proto_quota_service_proto_rawDescGZIP() []byte {
	file_proto_quota_service_proto_rawDescOnce.Do(func() {
		file_proto_quota_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_quota_service_proto_rawDesc), len(file_proto_quota_service_proto_rawDesc)))
	})
	return file_proto_quota_service_proto_rawDescData
}

var file_proto_quota_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_quota_service_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_proto_quota_service_proto_goTypes = []any{
	(Interval)(0),                 // 0: quota_service.Interval
	(*Tick)(nil),                  // 1: quota_service.Tick
	(*IngestTickRequest)(nil),     // 2: quota_service.IngestTickRequest
	(*IngestTickResponse)(nil),    // 3: quota_service.IngestTickResponse
	(*IngestTicksRequest)(nil),    // 4: quota_service.IngestTicksRequest
	(*IngestTicksResponse)(nil),   // 5: quota_service.IngestTicksResponse
	(*HealthCheckRequest)(nil),    // 6: quota_service.HealthCheckRequest
	(*HealthCheckResponse)(nil),   // 7: quota_service.HealthCheckResponse
	(*GetTicksRequest)(nil),       // 8: quota_service.GetTicksRequest
	(*GetTicksResponse)(nil),      // 9: quota_service.GetTicksResponse
	(*GetLatestTickRequest)(nil),  // 10: quota_service.GetLatestTickRequest
	(*GetLatestTickResponse)(nil), // 11: quota_service.GetLatestTickResponse
}
var file_proto_quota_service_proto_depIdxs = []int32{
	1,  // 0: quota_service.IngestTickRequest.tick:type_name -> quota_service.Tick
	1,  // 1: quota_service.IngestTicksRequest.ticks:type_name -> quota_service.Tick
	0,  // 2: quota_service.GetTicksRequest.interval:type_name -> quota_service.Interval
	1,  // 3: quota_service.GetTicksResponse.ticks:type_name -> quota_service.Tick
	1,  // 4: quota_service.GetLatestTickResponse.tick:type_name -> quota_service.Tick
	2,  // 5: quota_service.QuotaService.IngestTick:input_type -> quota_service.IngestTickRequest
	4,  // 6: quota_service.QuotaService.IngestTicks:input_type -> quota_service.IngestTicksRequest
	8,  // 7: quota_service.QuotaService.GetTicks:input_type -> quota_service.GetTicksRequest
	10, // 8: quota_service.QuotaService.GetLatestTick:input_type -> quota_service.GetLatestTickRequest
	6,  // 9: quota_service.QuotaService.HealthCheck:input_type -> quota_service.HealthCheckRequest
	3,  // 10: quota_service.QuotaService.IngestTick:output_type -> quota_service.IngestTickResponse
	5,  // 11: quota_service.QuotaService.IngestTicks:output_type -> quota_service.IngestTicksResponse
	9,  // 12: quota_service.QuotaService.GetTicks:output_type -> quota_service.GetTicksResponse
	11, // 13: quota_service.QuotaService.GetLatestTick:output_type -> quota_service.GetLatestTickResponse
	7,  // 14: quota_service.QuotaService.HealthCheck:output_type -> quota_service.HealthCheckResponse
	10, // [10:15] is the sub-list for method output_type
	5,  // [5:10] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_proto_quota_service_proto_init() }
func file_proto_quota_service_proto_init() {
	if File_proto_quota_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_quota_service_proto_rawDesc), len(file_proto_quota_service_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_quota_service_proto_goTypes,
		DependencyIndexes: file_proto_quota_service_proto_depIdxs,
		EnumInfos:         file_proto_quota_service_proto_enumTypes,
		MessageInfos:      file_proto_quota_service_proto_msgTypes,
	}.Build()
	File_proto_quota_service_proto = out.File
	file_proto_quota_service_proto_goTypes = nil
	file_proto_quota_service_proto_depIdxs = nil
}
