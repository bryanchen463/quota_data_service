# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import quota_service_pb2 as quota__service__pb2

GRPC_GENERATED_VERSION = '1.68.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in quota_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class QuotaServiceStub(object):
    """行情数据服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.IngestTick = channel.unary_unary(
                '/quota_service.QuotaService/IngestTick',
                request_serializer=quota__service__pb2.IngestTickRequest.SerializeToString,
                response_deserializer=quota__service__pb2.IngestTickResponse.FromString,
                _registered_method=True)
        self.IngestTicks = channel.unary_unary(
                '/quota_service.QuotaService/IngestTicks',
                request_serializer=quota__service__pb2.IngestTicksRequest.SerializeToString,
                response_deserializer=quota__service__pb2.IngestTicksResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/quota_service.QuotaService/HealthCheck',
                request_serializer=quota__service__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=quota__service__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class QuotaServiceServicer(object):
    """行情数据服务
    """

    def IngestTick(self, request, context):
        """推送行情数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IngestTicks(self, request, context):
        """批量推送行情数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """健康检查
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QuotaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'IngestTick': grpc.unary_unary_rpc_method_handler(
                    servicer.IngestTick,
                    request_deserializer=quota__service__pb2.IngestTickRequest.FromString,
                    response_serializer=quota__service__pb2.IngestTickResponse.SerializeToString,
            ),
            'IngestTicks': grpc.unary_unary_rpc_method_handler(
                    servicer.IngestTicks,
                    request_deserializer=quota__service__pb2.IngestTicksRequest.FromString,
                    response_serializer=quota__service__pb2.IngestTicksResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=quota__service__pb2.HealthCheckRequest.FromString,
                    response_serializer=quota__service__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'quota_service.QuotaService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('quota_service.QuotaService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class QuotaService(object):
    """行情数据服务
    """

    @staticmethod
    def IngestTick(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/quota_service.QuotaService/IngestTick',
            quota__service__pb2.IngestTickRequest.SerializeToString,
            quota__service__pb2.IngestTickResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IngestTicks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/quota_service.QuotaService/IngestTicks',
            quota__service__pb2.IngestTicksRequest.SerializeToString,
            quota__service__pb2.IngestTicksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/quota_service.QuotaService/HealthCheck',
            quota__service__pb2.HealthCheckRequest.SerializeToString,
            quota__service__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
